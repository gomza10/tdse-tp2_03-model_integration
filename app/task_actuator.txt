  task_actuator.c (task_actuator.h, task_actuator_attribute.h) 
   Non-Blocking & Update By Time Code -> Actuator Modeling

  task_actuator_interface.c (task_actuator_interface.h)
   Non-Blocking Code


En el archivo de atributos se define la siguiente información constructiva:
- Eventos posibles para esta tarea
- Estados posibles
- ID de cada actuador.


Se define la lista de configuración de los actuadores. Allí se completa la información de hardware (pin, puerto, etc.), tiempos máximos, nivel de señal, etc
typedef struct
{
	task_actuator_id_t	identifier;
	GPIO_TypeDef *		gpio_port;
	uint16_t		pin;
	GPIO_PinState		led_on;
	GPIO_PinState		led_off;
	uint32_t		tick_blink;
	uint32_t		tick_pulse;
} task_actuator_cfg_t;


También se define la lista de datos de cada actuador. Se define un tick, event, state y una flag booleana que permite indicar si ocurrió un evento.

typedef struct
{
	uint32_t		tick;
	task_actuator_st_t	state;
	task_actuator_ev_t	event;
	bool			flag;
} task_actuator_dta_t;


En la función task_actuator_init se recorre la lista de los datos de cada actuador y se inicializa junto con el contador de ticks


En la función de update se sigue la siguiente secuencia:
- Se recorre la lista de datos de cada actuador
- Se recorre el diagrama de estados definido para el actuador, verificando la ocurrencia de un evento (con su guarda si corresponde)
	y asignando el estado de correspondiente al mismo, junto con su acción


#NOTA GENÉRICA:
En general, en el task_XXXX_update se utilizará la lista de configuración para tomar acciones sobre el hardware (indicar un evento si un botón se presiona o encender un led)
y se utilizará la lista de datos para saber si ocurrieron los eventos y circular a través del statecharch
